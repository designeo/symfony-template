<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use AppBundle\Repository\Interfaces\iSlugglableRepository;
use AppBundle\Repository\Traits\FindByLocaleTrait;

/**
 * DestinationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DestinationRepository extends EntityRepository implements iSlugglableRepository
{

    use FindByLocaleTrait;

    /**
     * Returns all Destination entities which have translation in given locale
     *
     * @param string $translationLocale
     * @return array
     */
    public function findAllWithTranslation($translationLocale)
    {
        $qb = $this->createQueryBuilder('D');
        $qb
            ->select('D, DT')
            ->join('D.translations', 'DT')
            ->andWhere('DT.locale = :locale')
            ->setParameter('locale', $translationLocale);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param string $locale
     * @param string $direction ASC|DESC
     *
     * @return array
     */
    public function findAllOrderedByLocale($locale, $direction = 'ASC')
    {
        $qb = $this->createQueryBuilder('D');
        $qb
            ->select('D, DT')
            ->leftJoin('D.translations', 'DT')
            ->where('DT.locale = :locale')
            ->setParameter('locale', $locale)
            ->orderBy('DT.locale', $direction);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $slug
     * @param $locale
     * @return bool
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function slugIsUsed($slug, $locale)
    {
        $qb = $this->createQueryBuilder('D');
        $qb
          ->select('D, DT')
          ->leftJoin('D.translations', 'DT')
          ->where('DT.locale = :locale')
          ->setParameter('locale', $locale)
            ->andWhere('DT.slug = :slug')
          ->setParameter('slug', $slug);

        $entity = $qb->getQuery()->getOneOrNullResult();

        return $entity !== null;
    }
}
